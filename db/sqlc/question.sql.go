// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: question.sql

package db

import (
	"context"
)

const createQuestion = `-- name: CreateQuestion :one
insert into question (
    quiz_id,
    question,
    answer
) values (
    $1, $2, $3
) returning id, quiz_id, question, created_at, answer
`

type CreateQuestionParams struct {
	QuizID   int64  `json:"quiz_id"`
	Question string `json:"question"`
	Answer   string `json:"answer"`
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion, arg.QuizID, arg.Question, arg.Answer)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.Question,
		&i.CreatedAt,
		&i.Answer,
	)
	return i, err
}

const deleteQuestion = `-- name: DeleteQuestion :exec
delete from question where id = $1
`

func (q *Queries) DeleteQuestion(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteQuestion, id)
	return err
}

const getAllQuestionByQuizId = `-- name: GetAllQuestionByQuizId :many
select id, quiz_id, question, created_at, answer from question where quiz_id = $1
`

func (q *Queries) GetAllQuestionByQuizId(ctx context.Context, quizID int64) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, getAllQuestionByQuizId, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.QuizID,
			&i.Question,
			&i.CreatedAt,
			&i.Answer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuestionById = `-- name: GetQuestionById :one
select id, quiz_id, question, created_at, answer from question where id = $1 limit 1
`

func (q *Queries) GetQuestionById(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRowContext(ctx, getQuestionById, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.Question,
		&i.CreatedAt,
		&i.Answer,
	)
	return i, err
}

const listQuestion = `-- name: ListQuestion :many
select id, quiz_id, question, created_at, answer from question
`

func (q *Queries) ListQuestion(ctx context.Context) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, listQuestion)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Question{}
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.QuizID,
			&i.Question,
			&i.CreatedAt,
			&i.Answer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :one
update question set
    question = $2,
    answer = $3
where id = $1
returning id, quiz_id, question, created_at, answer
`

type UpdateQuestionParams struct {
	ID       int64  `json:"id"`
	Question string `json:"question"`
	Answer   string `json:"answer"`
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, updateQuestion, arg.ID, arg.Question, arg.Answer)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.Question,
		&i.CreatedAt,
		&i.Answer,
	)
	return i, err
}
